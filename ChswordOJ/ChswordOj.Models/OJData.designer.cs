#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.1433
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChswordOJ.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="OJDB")]
	public partial class OJDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertAnswer(Answer instance);
    partial void UpdateAnswer(Answer instance);
    partial void DeleteAnswer(Answer instance);
    #endregion
		
		public OJDataDataContext() : 
				base(global::ChswordOJ.Models.Properties.Settings.Default.OJDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public OJDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OJDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OJDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OJDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Group> Group
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<Question> Question
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<Answer> Answer
		{
			get
			{
				return this.GetTable<Answer>();
			}
		}
		
		[Function(Name="dbo.AnswerInsert")]
		public int AnswerInsert([Parameter(DbType="NVarChar(256)")] string username, [Parameter(DbType="BigInt")] System.Nullable<long> questionid, [Parameter(DbType="NVarChar(50)")] string exe)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), username, questionid, exe);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.AnswerUpdate")]
		public int AnswerUpdate([Parameter(DbType="BigInt")] System.Nullable<long> id, [Parameter(DbType="TinyInt")] System.Nullable<byte> status)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, status);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.AnswerSelect")]
		public ISingleResult<AnswerSelectResult> AnswerSelect([Parameter(DbType="BigInt")] System.Nullable<long> questionid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), questionid);
			return ((ISingleResult<AnswerSelectResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetAnswerError")]
		public ISingleResult<GetAnswerErrorResult> GetAnswerError([Parameter(Name="Answerid", DbType="BigInt")] System.Nullable<long> answerid, [Parameter(DbType="TinyInt")] System.Nullable<byte> status)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), answerid, status);
			return ((ISingleResult<GetAnswerErrorResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.UserInsert")]
		public int UserInsert([Parameter(DbType="NVarChar(255)")] string username)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), username);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetAnswerPass")]
		public ISingleResult<GetAnswerPassResult> GetAnswerPass([Parameter(DbType="BigInt")] System.Nullable<long> answerid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), answerid);
			return ((ISingleResult<GetAnswerPassResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetLimit")]
		public ISingleResult<GetLimitResult> GetLimit([Parameter(DbType="BigInt")] System.Nullable<long> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((ISingleResult<GetLimitResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetUser")]
		public ISingleResult<GetUserResult> GetUser([Parameter(DbType="Int")] System.Nullable<int> type)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type);
			return ((ISingleResult<GetUserResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GroupDelete")]
		public int GroupDelete([Parameter(DbType="BigInt")] System.Nullable<long> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Groupid")]
		public ISingleResult<GroupidResult> Groupid([Parameter(DbType="BigInt")] System.Nullable<long> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((ISingleResult<GroupidResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GroupInsert")]
		public int GroupInsert([Parameter(DbType="NVarChar(250)")] string name, [Parameter(DbType="Int")] System.Nullable<int> type, [Parameter(Name="BeginTime", DbType="SmallDateTime")] System.Nullable<System.DateTime> beginTime, [Parameter(Name="EndTime", DbType="SmallDateTime")] System.Nullable<System.DateTime> endTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, type, beginTime, endTime);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GroupSelect")]
		public ISingleResult<GroupSelectResult> GroupSelect([Parameter(DbType="Int")] System.Nullable<int> type)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type);
			return ((ISingleResult<GroupSelectResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GroupUpdate")]
		public int GroupUpdate([Parameter(DbType="NVarChar(250)")] string name, [Parameter(DbType="BigInt")] System.Nullable<long> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, id);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.QuestionDelete")]
		public int QuestionDelete([Parameter(DbType="BigInt")] System.Nullable<long> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.QuestionInsert")]
		public int QuestionInsert([Parameter(DbType="NVarChar(255)")] string username, [Parameter(Name="MemoryLimit", DbType="BigInt")] System.Nullable<long> memoryLimit, [Parameter(Name="TimeLimit", DbType="BigInt")] System.Nullable<long> timeLimit, [Parameter(DbType="NVarChar(250)")] string title, [Parameter(Name="Body", DbType="NText")] string body, [Parameter(DbType="BigInt")] System.Nullable<long> groupid, [Parameter(Name="Test", DbType="NText")] string test, [Parameter(DbType="BigInt")] System.Nullable<long> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), username, memoryLimit, timeLimit, title, body, groupid, test, id);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.QuestionSelect")]
		public ISingleResult<QuestionSelectResult> QuestionSelect([Parameter(DbType="BigInt")] System.Nullable<long> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((ISingleResult<QuestionSelectResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.QuestionUpdate")]
		public int QuestionUpdate([Parameter(DbType="NVarChar(255)")] string username, [Parameter(Name="MemoryLimit", DbType="BigInt")] System.Nullable<long> memoryLimit, [Parameter(Name="TimeLimit", DbType="BigInt")] System.Nullable<long> timeLimit, [Parameter(DbType="NVarChar(250)")] string title, [Parameter(Name="Body", DbType="NText")] string body, [Parameter(DbType="BigInt")] System.Nullable<long> groupid, [Parameter(Name="Test", DbType="NText")] string test, [Parameter(DbType="BigInt")] System.Nullable<long> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), username, memoryLimit, timeLimit, title, body, groupid, test, id);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.SaveCode")]
		public int SaveCode([Parameter(DbType="BigInt")] System.Nullable<long> id, [Parameter(DbType="NText")] string text)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, text);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.SelectAllQuestionbyGroup")]
		public ISingleResult<SelectAllQuestionbyGroupResult> SelectAllQuestionbyGroup([Parameter(DbType="BigInt")] System.Nullable<long> groupid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupid);
			return ((ISingleResult<SelectAllQuestionbyGroupResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.SetAnswerText")]
		public int SetAnswerText([Parameter(DbType="BigInt")] System.Nullable<long> id, [Parameter(DbType="NText")] string text)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, text);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.StatusSelect")]
		public ISingleResult<StatusSelectResult> StatusSelect([Parameter(Name="Questionid", DbType="BigInt")] System.Nullable<long> questionid, [Parameter(DbType="Int")] System.Nullable<int> type)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), questionid, type);
			return ((ISingleResult<StatusSelectResult>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Username;
		
		private string _Name;
		
		private bool _Sex;
		
		private System.DateTime _Birthday;
		
		private int _Grade;
		
		private string _School;
		
		private long _Submit;
		
		private long _Accepted;
		
		private int _Type;
		
		private EntitySet<Question> _Question;
		
		private EntitySet<Answer> _Answer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSexChanging(bool value);
    partial void OnSexChanged();
    partial void OnBirthdayChanging(System.DateTime value);
    partial void OnBirthdayChanged();
    partial void OnGradeChanging(int value);
    partial void OnGradeChanged();
    partial void OnSchoolChanging(string value);
    partial void OnSchoolChanged();
    partial void OnSubmitChanging(long value);
    partial void OnSubmitChanged();
    partial void OnAcceptedChanging(long value);
    partial void OnAcceptedChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
		
		public User()
		{
			this._Question = new EntitySet<Question>(new Action<Question>(this.attach_Question), new Action<Question>(this.detach_Question));
			this._Answer = new EntitySet<Answer>(new Action<Answer>(this.attach_Answer), new Action<Answer>(this.detach_Answer));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Sex", DbType="Bit NOT NULL")]
		public bool Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[Column(Storage="_Birthday", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[Column(Storage="_Grade", DbType="Int NOT NULL")]
		public int Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[Column(Storage="_School", DbType="NVarChar(50)")]
		public string School
		{
			get
			{
				return this._School;
			}
			set
			{
				if ((this._School != value))
				{
					this.OnSchoolChanging(value);
					this.SendPropertyChanging();
					this._School = value;
					this.SendPropertyChanged("School");
					this.OnSchoolChanged();
				}
			}
		}
		
		[Column(Storage="_Submit", DbType="BigInt NOT NULL")]
		public long Submit
		{
			get
			{
				return this._Submit;
			}
			set
			{
				if ((this._Submit != value))
				{
					this.OnSubmitChanging(value);
					this.SendPropertyChanging();
					this._Submit = value;
					this.SendPropertyChanged("Submit");
					this.OnSubmitChanged();
				}
			}
		}
		
		[Column(Storage="_Accepted", DbType="BigInt NOT NULL")]
		public long Accepted
		{
			get
			{
				return this._Accepted;
			}
			set
			{
				if ((this._Accepted != value))
				{
					this.OnAcceptedChanging(value);
					this.SendPropertyChanging();
					this._Accepted = value;
					this.SendPropertyChanged("Accepted");
					this.OnAcceptedChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Association(Name="User_Question", Storage="_Question", ThisKey="Username", OtherKey="Username")]
		public EntitySet<Question> Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				this._Question.Assign(value);
			}
		}
		
		[Association(Name="User_Answer", Storage="_Answer", ThisKey="Username", OtherKey="Username")]
		public EntitySet<Answer> Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				this._Answer.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Question(Question entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Question(Question entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Answer(Answer entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Answer(Answer entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private long _Count;
		
		private int _Order;
		
		private int _Type;
		
		private System.Nullable<System.DateTime> _BeginTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private EntitySet<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountChanging(long value);
    partial void OnCountChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnBeginTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    #endregion
		
		public Group()
		{
			this._Question = new EntitySet<Question>(new Action<Question>(this.attach_Question), new Action<Question>(this.detach_Question));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Count", DbType="BigInt NOT NULL")]
		public long Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_BeginTime", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> BeginTime
		{
			get
			{
				return this._BeginTime;
			}
			set
			{
				if ((this._BeginTime != value))
				{
					this.OnBeginTimeChanging(value);
					this.SendPropertyChanging();
					this._BeginTime = value;
					this.SendPropertyChanged("BeginTime");
					this.OnBeginTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EndTime", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[Association(Name="Group_Question", Storage="_Question", OtherKey="GroupID")]
		public EntitySet<Question> Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				this._Question.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Question(Question entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Question(Question entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[Table(Name="dbo.Question")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Title;
		
		private string _Body;
		
		private long _TimeLimit;
		
		private long _MemoryLimit;
		
		private long _SubmitCount;
		
		private long _AcceptedCount;
		
		private string _Username;
		
		private System.DateTime _Addtime;
		
		private long _GroupID;
		
		private bool _IsTrue;
		
		private string _Test;
		
		private System.Nullable<long> _UseTime;
		
		private System.Nullable<long> _UseMemory;
		
		private EntitySet<Answer> _Answer;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnTimeLimitChanging(long value);
    partial void OnTimeLimitChanged();
    partial void OnMemoryLimitChanging(long value);
    partial void OnMemoryLimitChanged();
    partial void OnSubmitCountChanging(long value);
    partial void OnSubmitCountChanged();
    partial void OnAcceptedCountChanging(long value);
    partial void OnAcceptedCountChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnAddtimeChanging(System.DateTime value);
    partial void OnAddtimeChanged();
    partial void OnGroupIDChanging(long value);
    partial void OnGroupIDChanged();
    partial void OnIsTrueChanging(bool value);
    partial void OnIsTrueChanged();
    partial void OnTestChanging(string value);
    partial void OnTestChanged();
    partial void OnUseTimeChanging(System.Nullable<long> value);
    partial void OnUseTimeChanged();
    partial void OnUseMemoryChanging(System.Nullable<long> value);
    partial void OnUseMemoryChanged();
    #endregion
		
		public Question()
		{
			this._Answer = new EntitySet<Answer>(new Action<Answer>(this.attach_Answer), new Action<Answer>(this.detach_Answer));
			this._Group = default(EntityRef<Group>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_TimeLimit", DbType="BigInt NOT NULL")]
		public long TimeLimit
		{
			get
			{
				return this._TimeLimit;
			}
			set
			{
				if ((this._TimeLimit != value))
				{
					this.OnTimeLimitChanging(value);
					this.SendPropertyChanging();
					this._TimeLimit = value;
					this.SendPropertyChanged("TimeLimit");
					this.OnTimeLimitChanged();
				}
			}
		}
		
		[Column(Storage="_MemoryLimit", DbType="BigInt NOT NULL")]
		public long MemoryLimit
		{
			get
			{
				return this._MemoryLimit;
			}
			set
			{
				if ((this._MemoryLimit != value))
				{
					this.OnMemoryLimitChanging(value);
					this.SendPropertyChanging();
					this._MemoryLimit = value;
					this.SendPropertyChanged("MemoryLimit");
					this.OnMemoryLimitChanged();
				}
			}
		}
		
		[Column(Storage="_SubmitCount", DbType="BigInt NOT NULL")]
		public long SubmitCount
		{
			get
			{
				return this._SubmitCount;
			}
			set
			{
				if ((this._SubmitCount != value))
				{
					this.OnSubmitCountChanging(value);
					this.SendPropertyChanging();
					this._SubmitCount = value;
					this.SendPropertyChanged("SubmitCount");
					this.OnSubmitCountChanged();
				}
			}
		}
		
		[Column(Storage="_AcceptedCount", DbType="BigInt NOT NULL")]
		public long AcceptedCount
		{
			get
			{
				return this._AcceptedCount;
			}
			set
			{
				if ((this._AcceptedCount != value))
				{
					this.OnAcceptedCountChanging(value);
					this.SendPropertyChanging();
					this._AcceptedCount = value;
					this.SendPropertyChanged("AcceptedCount");
					this.OnAcceptedCountChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_Addtime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Addtime
		{
			get
			{
				return this._Addtime;
			}
			set
			{
				if ((this._Addtime != value))
				{
					this.OnAddtimeChanging(value);
					this.SendPropertyChanging();
					this._Addtime = value;
					this.SendPropertyChanged("Addtime");
					this.OnAddtimeChanged();
				}
			}
		}
		
		[Column(Storage="_GroupID", DbType="BigInt NOT NULL")]
		public long GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsTrue", DbType="Bit NOT NULL")]
		public bool IsTrue
		{
			get
			{
				return this._IsTrue;
			}
			set
			{
				if ((this._IsTrue != value))
				{
					this.OnIsTrueChanging(value);
					this.SendPropertyChanging();
					this._IsTrue = value;
					this.SendPropertyChanged("IsTrue");
					this.OnIsTrueChanged();
				}
			}
		}
		
		[Column(Storage="_Test", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Test
		{
			get
			{
				return this._Test;
			}
			set
			{
				if ((this._Test != value))
				{
					this.OnTestChanging(value);
					this.SendPropertyChanging();
					this._Test = value;
					this.SendPropertyChanged("Test");
					this.OnTestChanged();
				}
			}
		}
		
		[Column(Storage="_UseTime", DbType="BigInt")]
		public System.Nullable<long> UseTime
		{
			get
			{
				return this._UseTime;
			}
			set
			{
				if ((this._UseTime != value))
				{
					this.OnUseTimeChanging(value);
					this.SendPropertyChanging();
					this._UseTime = value;
					this.SendPropertyChanged("UseTime");
					this.OnUseTimeChanged();
				}
			}
		}
		
		[Column(Storage="_UseMemory", DbType="BigInt")]
		public System.Nullable<long> UseMemory
		{
			get
			{
				return this._UseMemory;
			}
			set
			{
				if ((this._UseMemory != value))
				{
					this.OnUseMemoryChanging(value);
					this.SendPropertyChanging();
					this._UseMemory = value;
					this.SendPropertyChanged("UseMemory");
					this.OnUseMemoryChanged();
				}
			}
		}
		
		[Association(Name="Question_Answer", Storage="_Answer", OtherKey="QuestionID")]
		public EntitySet<Answer> Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				this._Answer.Assign(value);
			}
		}
		
		[Association(Name="Group_Question", Storage="_Group", ThisKey="GroupID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Question.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Question.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(long);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[Association(Name="User_Question", Storage="_User", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Question.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Question.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Answer(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Answer(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[Table(Name="dbo.Answer")]
	public partial class Answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _QuestionID;
		
		private string _Username;
		
		private byte _Status;
		
		private System.DateTime _Addtime;
		
		private string _Complier;
		
		private string _Code;
		
		private string _Exe;
		
		private int _Type;
		
		private EntityRef<Question> _Question;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnQuestionIDChanging(long value);
    partial void OnQuestionIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnAddtimeChanging(System.DateTime value);
    partial void OnAddtimeChanged();
    partial void OnComplierChanging(string value);
    partial void OnComplierChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnExeChanging(string value);
    partial void OnExeChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
		
		public Answer()
		{
			this._Question = default(EntityRef<Question>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionID", DbType="BigInt NOT NULL")]
		public long QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Addtime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Addtime
		{
			get
			{
				return this._Addtime;
			}
			set
			{
				if ((this._Addtime != value))
				{
					this.OnAddtimeChanging(value);
					this.SendPropertyChanging();
					this._Addtime = value;
					this.SendPropertyChanged("Addtime");
					this.OnAddtimeChanged();
				}
			}
		}
		
		[Column(Storage="_Complier", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Complier
		{
			get
			{
				return this._Complier;
			}
			set
			{
				if ((this._Complier != value))
				{
					this.OnComplierChanging(value);
					this.SendPropertyChanging();
					this._Complier = value;
					this.SendPropertyChanged("Complier");
					this.OnComplierChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Exe", DbType="NVarChar(50)")]
		public string Exe
		{
			get
			{
				return this._Exe;
			}
			set
			{
				if ((this._Exe != value))
				{
					this.OnExeChanging(value);
					this.SendPropertyChanging();
					this._Exe = value;
					this.SendPropertyChanged("Exe");
					this.OnExeChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Association(Name="Question_Answer", Storage="_Question", ThisKey="QuestionID", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Answer.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Answer.Add(this);
						this._QuestionID = value.ID;
					}
					else
					{
						this._QuestionID = default(long);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		[Association(Name="User_Answer", Storage="_User", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Answer.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Answer.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class AnswerSelectResult
	{
		
		private long _id;
		
		private System.DateTime _Addtime;
		
		private byte _status;
		
		private string _username;
		
		private string _title;
		
		public AnswerSelectResult()
		{
		}
		
		[Column(Storage="_id", DbType="BigInt NOT NULL")]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[Column(Storage="_Addtime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Addtime
		{
			get
			{
				return this._Addtime;
			}
			set
			{
				if ((this._Addtime != value))
				{
					this._Addtime = value;
				}
			}
		}
		
		[Column(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this._status = value;
				}
			}
		}
		
		[Column(Storage="_username", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this._username = value;
				}
			}
		}
		
		[Column(Storage="_title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this._title = value;
				}
			}
		}
	}
	
	public partial class GetAnswerErrorResult
	{
		
		private string _Complier;
		
		private long _Questionid;
		
		private string _username;
		
		private System.DateTime _Addtime;
		
		public GetAnswerErrorResult()
		{
		}
		
		[Column(Storage="_Complier", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Complier
		{
			get
			{
				return this._Complier;
			}
			set
			{
				if ((this._Complier != value))
				{
					this._Complier = value;
				}
			}
		}
		
		[Column(Storage="_Questionid", DbType="BigInt NOT NULL")]
		public long Questionid
		{
			get
			{
				return this._Questionid;
			}
			set
			{
				if ((this._Questionid != value))
				{
					this._Questionid = value;
				}
			}
		}
		
		[Column(Storage="_username", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this._username = value;
				}
			}
		}
		
		[Column(Storage="_Addtime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Addtime
		{
			get
			{
				return this._Addtime;
			}
			set
			{
				if ((this._Addtime != value))
				{
					this._Addtime = value;
				}
			}
		}
	}
	
	public partial class GetAnswerPassResult
	{
		
		private string _Code;
		
		public GetAnswerPassResult()
		{
		}
		
		[Column(Storage="_Code", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this._Code = value;
				}
			}
		}
	}
	
	public partial class GetLimitResult
	{
		
		private long _MemoryLimit;
		
		private long _TimeLimit;
		
		private string _test;
		
		public GetLimitResult()
		{
		}
		
		[Column(Storage="_MemoryLimit", DbType="BigInt NOT NULL")]
		public long MemoryLimit
		{
			get
			{
				return this._MemoryLimit;
			}
			set
			{
				if ((this._MemoryLimit != value))
				{
					this._MemoryLimit = value;
				}
			}
		}
		
		[Column(Storage="_TimeLimit", DbType="BigInt NOT NULL")]
		public long TimeLimit
		{
			get
			{
				return this._TimeLimit;
			}
			set
			{
				if ((this._TimeLimit != value))
				{
					this._TimeLimit = value;
				}
			}
		}
		
		[Column(Storage="_test", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string test
		{
			get
			{
				return this._test;
			}
			set
			{
				if ((this._test != value))
				{
					this._test = value;
				}
			}
		}
	}
	
	public partial class GetUserResult
	{
		
		private string _username;
		
		private string _name;
		
		private long _Accepted;
		
		private long _Submit;
		
		private string _Ratio;
		
		public GetUserResult()
		{
		}
		
		[Column(Storage="_username", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this._username = value;
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this._name = value;
				}
			}
		}
		
		[Column(Storage="_Accepted", DbType="BigInt NOT NULL")]
		public long Accepted
		{
			get
			{
				return this._Accepted;
			}
			set
			{
				if ((this._Accepted != value))
				{
					this._Accepted = value;
				}
			}
		}
		
		[Column(Storage="_Submit", DbType="BigInt NOT NULL")]
		public long Submit
		{
			get
			{
				return this._Submit;
			}
			set
			{
				if ((this._Submit != value))
				{
					this._Submit = value;
				}
			}
		}
		
		[Column(Storage="_Ratio", DbType="NVarChar(5)")]
		public string Ratio
		{
			get
			{
				return this._Ratio;
			}
			set
			{
				if ((this._Ratio != value))
				{
					this._Ratio = value;
				}
			}
		}
	}
	
	public partial class GroupidResult
	{
		
		private string _name;
		
		private long _count;
		
		public GroupidResult()
		{
		}
		
		[Column(Storage="_name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this._name = value;
				}
			}
		}
		
		[Column(Storage="_count", DbType="BigInt NOT NULL")]
		public long count
		{
			get
			{
				return this._count;
			}
			set
			{
				if ((this._count != value))
				{
					this._count = value;
				}
			}
		}
	}
	
	public partial class GroupSelectResult
	{
		
		private string _name;
		
		private long _id;
		
		private long _count;
		
		private int _order;
		
		public GroupSelectResult()
		{
		}
		
		[Column(Storage="_name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this._name = value;
				}
			}
		}
		
		[Column(Storage="_id", DbType="BigInt NOT NULL")]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[Column(Storage="_count", DbType="BigInt NOT NULL")]
		public long count
		{
			get
			{
				return this._count;
			}
			set
			{
				if ((this._count != value))
				{
					this._count = value;
				}
			}
		}
		
		[Column(Name="[order]", Storage="_order", DbType="Int NOT NULL")]
		public int order
		{
			get
			{
				return this._order;
			}
			set
			{
				if ((this._order != value))
				{
					this._order = value;
				}
			}
		}
	}
	
	public partial class QuestionSelectResult
	{
		
		private System.DateTime _Addtime;
		
		private string _username;
		
		private long _AcceptedCount;
		
		private string _Test;
		
		private long _SubmitCount;
		
		private long _MemoryLimit;
		
		private long _TimeLimit;
		
		private string _Body;
		
		private string _title;
		
		private long _groupid;
		
		public QuestionSelectResult()
		{
		}
		
		[Column(Storage="_Addtime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Addtime
		{
			get
			{
				return this._Addtime;
			}
			set
			{
				if ((this._Addtime != value))
				{
					this._Addtime = value;
				}
			}
		}
		
		[Column(Storage="_username", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this._username = value;
				}
			}
		}
		
		[Column(Storage="_AcceptedCount", DbType="BigInt NOT NULL")]
		public long AcceptedCount
		{
			get
			{
				return this._AcceptedCount;
			}
			set
			{
				if ((this._AcceptedCount != value))
				{
					this._AcceptedCount = value;
				}
			}
		}
		
		[Column(Storage="_Test", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Test
		{
			get
			{
				return this._Test;
			}
			set
			{
				if ((this._Test != value))
				{
					this._Test = value;
				}
			}
		}
		
		[Column(Storage="_SubmitCount", DbType="BigInt NOT NULL")]
		public long SubmitCount
		{
			get
			{
				return this._SubmitCount;
			}
			set
			{
				if ((this._SubmitCount != value))
				{
					this._SubmitCount = value;
				}
			}
		}
		
		[Column(Storage="_MemoryLimit", DbType="BigInt NOT NULL")]
		public long MemoryLimit
		{
			get
			{
				return this._MemoryLimit;
			}
			set
			{
				if ((this._MemoryLimit != value))
				{
					this._MemoryLimit = value;
				}
			}
		}
		
		[Column(Storage="_TimeLimit", DbType="BigInt NOT NULL")]
		public long TimeLimit
		{
			get
			{
				return this._TimeLimit;
			}
			set
			{
				if ((this._TimeLimit != value))
				{
					this._TimeLimit = value;
				}
			}
		}
		
		[Column(Storage="_Body", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this._Body = value;
				}
			}
		}
		
		[Column(Storage="_title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this._title = value;
				}
			}
		}
		
		[Column(Storage="_groupid", DbType="BigInt NOT NULL")]
		public long groupid
		{
			get
			{
				return this._groupid;
			}
			set
			{
				if ((this._groupid != value))
				{
					this._groupid = value;
				}
			}
		}
	}
	
	public partial class SelectAllQuestionbyGroupResult
	{
		
		private long _id;
		
		private string _title;
		
		private long _AcceptedCount;
		
		private long _SubmitCount;
		
		private string _Ratio;
		
		public SelectAllQuestionbyGroupResult()
		{
		}
		
		[Column(Storage="_id", DbType="BigInt NOT NULL")]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[Column(Storage="_title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this._title = value;
				}
			}
		}
		
		[Column(Storage="_AcceptedCount", DbType="BigInt NOT NULL")]
		public long AcceptedCount
		{
			get
			{
				return this._AcceptedCount;
			}
			set
			{
				if ((this._AcceptedCount != value))
				{
					this._AcceptedCount = value;
				}
			}
		}
		
		[Column(Storage="_SubmitCount", DbType="BigInt NOT NULL")]
		public long SubmitCount
		{
			get
			{
				return this._SubmitCount;
			}
			set
			{
				if ((this._SubmitCount != value))
				{
					this._SubmitCount = value;
				}
			}
		}
		
		[Column(Storage="_Ratio", DbType="NVarChar(5)")]
		public string Ratio
		{
			get
			{
				return this._Ratio;
			}
			set
			{
				if ((this._Ratio != value))
				{
					this._Ratio = value;
				}
			}
		}
	}
	
	public partial class StatusSelectResult
	{
		
		private long _Questionid;
		
		private string _username;
		
		private byte _status;
		
		private string _exe;
		
		private System.DateTime _Addtime;
		
		private long _id;
		
		private string _title;
		
		public StatusSelectResult()
		{
		}
		
		[Column(Storage="_Questionid", DbType="BigInt NOT NULL")]
		public long Questionid
		{
			get
			{
				return this._Questionid;
			}
			set
			{
				if ((this._Questionid != value))
				{
					this._Questionid = value;
				}
			}
		}
		
		[Column(Storage="_username", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this._username = value;
				}
			}
		}
		
		[Column(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this._status = value;
				}
			}
		}
		
		[Column(Storage="_exe", DbType="NVarChar(50)")]
		public string exe
		{
			get
			{
				return this._exe;
			}
			set
			{
				if ((this._exe != value))
				{
					this._exe = value;
				}
			}
		}
		
		[Column(Storage="_Addtime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Addtime
		{
			get
			{
				return this._Addtime;
			}
			set
			{
				if ((this._Addtime != value))
				{
					this._Addtime = value;
				}
			}
		}
		
		[Column(Storage="_id", DbType="BigInt NOT NULL")]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[Column(Storage="_title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this._title = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
